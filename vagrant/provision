#!/bin/bash

set -e
[ -z $DEBUG ] || set -x && export DEBUG

GARDEN_LINUX_REF=${1:-HEAD}

function get {
  local_path="/vagrant/vagrant/tmp/$2"
  if ! [ -f $local_path ]; then
    echo "Downloading $2"
    curl --create-dirs -o $local_path $1
  else
    echo "Skipping download of $2 - found local copy"
  fi
}

export H=/home/vagrant
cd $H

echo ":::: Improving SSH..."
echo "UseDNS no" >> /etc/ssh/sshd_config
echo "GSSAPIAuthentication no" >> /etc/ssh/sshd_config

echo ":::: Insecure sudo..."
echo 'Defaults !env_reset' > /etc/sudoers.d/garden

echo ":::: Installing dependencies from apt..."
apt-get update -qq -y > /dev/null
apt-get install -qq -y git mercurial pkg-config autoconf asciidoc xmlto linux-image-extra-$(uname -r) quota > /dev/null
apt-get build-dep -qq -y btrfs-tools > /dev/null

echo ":::: Installing btrfs-tools..."
mkdir -p $H/btrfs
cd $H/btrfs
git clone git://git.kernel.org/pub/scm/linux/kernel/git/kdave/btrfs-progs.git
cd btrfs-progs
git checkout c061b303c08af7a58373908d0d77ef0f1161fd36
./autogen.sh
./configure
make
make install
cd $H

if ! which docker > /dev/null
then
  echo ":::: Installing Docker..."
  wget -qO- https://get.docker.com/ | sh
fi

echo ":::: Adding shell aliases..."
echo 'alias ls="ls -lAF --color=auto"' >> $H/.bashrc

echo ":::: Preparing directories..."
mkdir -p $H/garden/{containers,snapshots,rootfs,depot,graph}

echo ":::: Mounting btrfs volume..."
mount_point=$H/garden/graph
backing_store=$H/garden/btrfs_backing_store
loopback_device=/dev/btrfs_loop

dd if=/dev/zero of=$backing_store bs=1M count=8000
mknod $loopback_device b 7 200
losetup $loopback_device $backing_store
mkfs.btrfs $backing_store
mount -t btrfs $loopback_device $mount_point

echo ":::: Downloading Default RootFS..."
get http://cf-runtime-stacks.s3.amazonaws.com/cflinuxfs2.dev.tgz cflinuxfs2.tgz

# TODO: Don't regenerate rootfs'
echo ":::: Building FuseFS RootFS..."
git clone git://github.com/cloudfoundry-incubator/diego-dockerfiles.git
cd diego-dockerfiles/warden-ci
make fuse-test-rootfs.tar
gzip -c fuse-test-rootfs.tar > /vagrant/vagrant/tmp/fusefs.tgz
echo ":::: Building Nestable RootFS..."
make ubuntu-test-rootfs.tar
gzip -c ubuntu-test-rootfs.tar > /vagrant/vagrant/tmp/nestable.tgz

echo ":::: Unpacking rootfs..."
mkdir -p $H/garden/rootfs/{alice,cflinuxfs2,nestable,fusefs}
tar -C $H/garden/rootfs/alice      -xzpf /vagrant/rootfs/alice.tgz
tar -C $H/garden/rootfs/cflinuxfs2 -xzpf /vagrant/vagrant/tmp/cflinuxfs2.tgz
tar -C $H/garden/rootfs/nestable   -xzpf /vagrant/vagrant/tmp/nestable.tgz
tar -C $H/garden/rootfs/fusefs     -xzpf /vagrant/vagrant/tmp/fusefs.tgz

echo ":::: Installing Go..."
get https://storage.googleapis.com/golang/go1.4.2.linux-amd64.tar.gz go.tgz
tar -C /usr/local -xzf /vagrant/vagrant/tmp/go.tgz

echo ":::: Configuring GOPATH..."
echo "export GOPATH=$H/go" >> $H/.profile
echo 'export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin' >> $H/.profile
source $H/.profile
mkdir $GOPATH

echo ":::: Installing godep..."
go get -u github.com/tools/godep

echo ":::: Installing gaol..."
go get -u github.com/xoebus/gaol

echo ":::: Installing garden-linux $GARDEN_LINUX_REF..."
git clone https://github.com/cloudfoundry-incubator/garden-linux \
          $GOPATH/src/github.com/cloudfoundry-incubator/garden-linux
/vagrant/vagrant/install_garden_linux $GARDEN_LINUX_REF

echo ":::: Installing ginkgo..."
go install github.com/onsi/ginkgo/ginkgo

echo ":::: Linking garden-acceptance-tests..."
mkdir -p $GOPATH/src/github.com/cloudfoundry-incubator/
ln -s /vagrant $GOPATH/src/github.com/cloudfoundry-incubator/garden-acceptance

echo ":::: chowning GOPATH..."
chown -R vagrant:vagrant $GOPATH
